name: tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }} @ ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  cmake-build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.build_type }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows VS2019 - AES-NI,     aes: aesni,    os: windows-2019, extension: .exe, }
        - { name: Windows VS2022 - AES-NI,     aes: aesni,    os: windows-2022, extension: .exe, }
        - { name: MacOS XCode - 13 - AES-NI  , aes: aesni,    os: macos-13 }
        - { name: MacOS XCode - 14 - AES-NEON, aes: neon,     os: macos-14 }
        - { name: MacOS XCode - 15 - AES-NEON, aes: neon,     os: macos-15 }
        - { name: MacOS XCode - 13 - Portable, aes: portable, os: macos-13 }
        - { name: MacOS XCode - 14 - Portable, aes: portable, os: macos-14 }
        - { name: MacOS XCode - 15 - Portable, aes: portable, os: macos-15 }
        config:
        - { build_type: Debug }
        - { build_type: Release }

    steps:
    - uses: actions/checkout@v4

    - run: cmake --version

    - name: Configure
      run: cmake -S . -B . -D AES_IMPL=${{matrix.platform.aes}} -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}

    - name: Build
      run: cmake --build . --config ${{ matrix.config.build_type }}

    - name: Run Tests (Linux)
      if: runner.os == 'Linux'
      run: ./tests

    - name: Run Tests (MacOS)
      if: runner.os == 'macOS'
      run: ./tests

    - name: Run Tests (Windows)
      if: runner.os == 'Windows'
      run: ${{ matrix.config.build_type }}\tests${{matrix.platform.extension}}

  aarch64-gcc:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: update and upgrade env
      run: sudo apt-get update && sudo apt-get upgrade

    - name: Install essentials
      run: sudo apt-get install qemu-user qemu-user-static gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu binutils-aarch64-linux-gnu-dbg build-essential

    - name: create test output directory
      run: mkdir bin

    - name: Test - portable C++ code
      run: make test CXX=aarch64-linux-gnu-g++ LINK=static TYPE=debug VERSION=portable

    - name: Test - aarch64/armv8 - ARM-NEON-AES
      run: make test CXX=aarch64-linux-gnu-g++ LINK=static TYPE=debug VERSION=neon

  clang:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, windows-2019, macos-13]
    
    steps:
    - uses: actions/checkout@v4

    - name: create test output directory
      run: mkdir bin

    - name: Test - portable C++ code
      run: make test CXX=clang++ TYPE=debug VERSION=portable

    - name: Test - x86-64 - AES-NI
      run: make test CXX=clang++ TYPE=debug VERSION=aesni

  gcc:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, windows-2019, macos-13]
    
    steps:
    - uses: actions/checkout@v4

    - name: create test output directory
      run: mkdir bin

    - name: Test - portable C++ code
      run: make test CXX=g++ TYPE=debug VERSION=portable

    - name: Test - x86-64 - AES-NI
      run: make test CXX=g++ TYPE=debug VERSION=aesni